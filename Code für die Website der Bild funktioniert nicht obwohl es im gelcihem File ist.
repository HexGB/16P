<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>16 Personalities Quiz</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }

    .container {
      background: white;
      border-radius: 20px;
      box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
      max-width: 700px;
      width: 100%;
      padding: 40px;
    }

    .screen {
      display: none;
    }

    .screen.active {
      display: block;
    }

    h1 {
      font-size: 2.5rem;
      color: #333;
      text-align: center;
      margin-bottom: 20px;
    }

    .subtitle {
      font-size: 1.2rem;
      color: #666;
      text-align: center;
      margin-bottom: 30px;
    }

    .info-box {
      background: #f0f4ff;
      padding: 20px;
      border-radius: 10px;
      margin: 20px 0;
      text-align: center;
    }

    .info-box p {
      color: #555;
      margin: 10px 0;
      font-size: 1.1rem;
    }

    .btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 15px 40px;
      font-size: 1.1rem;
      border-radius: 50px;
      cursor: pointer;
      transition: transform 0.2s, box-shadow 0.2s;
      display: block;
      margin: 20px auto;
    }

    .btn:hover {
      transform: scale(1.05);
      box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
    }

    .progress-container {
      margin-bottom: 30px;
    }

    .progress-info {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
      color: #666;
      font-size: 0.9rem;
    }

    .progress-bar {
      background: #e0e0e0;
      height: 10px;
      border-radius: 10px;
      overflow: hidden;
    }

    .progress-fill {
      background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
      height: 100%;
      transition: width 0.3s ease;
    }

    .question-text {
      font-size: 1.8rem;
      color: #333;
      margin-bottom: 30px;
      font-weight: 600;
    }

    .options {
      display: flex;
      flex-direction: column;
      gap: 15px;
      margin-bottom: 30px;
    }

    .option {
      background: #f8f9fa;
      border: 2px solid #e0e0e0;
      padding: 20px;
      border-radius: 12px;
      cursor: pointer;
      transition: all 0.2s;
      font-size: 1.1rem;
      color: #333;
    }

    .option:hover {
      background: #e8f0ff;
      border-color: #667eea;
      transform: translateX(5px);
    }

    .back-btn {
      background: transparent;
      color: #667eea;
      border: 2px solid #667eea;
      padding: 10px 30px;
      font-size: 1rem;
      border-radius: 50px;
      cursor: pointer;
      transition: all 0.2s;
    }

    .back-btn:hover {
      background: #667eea;
      color: white;
    }

    .result-box {
      text-align: center;
      padding: 30px;
    }

    .result-badge {
      display: inline-block;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      font-size: 4rem;
      font-weight: bold;
      padding: 30px 60px;
      border-radius: 20px;
      margin: 20px 0;
    }

    .result-description {
      font-size: 1.5rem;
      color: #555;
      margin: 20px 0;
    }

    .chat-section {
      margin-top: 30px;
      display: none;
    }

    .chat-section.active {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 20px;
      align-items: start;
    }

    .professor-container {
      position: sticky;
      top: 20px;
      text-align: center;
    }

    .professor-speech {
      background: white;
      border: 2px solid #e0e0e0;
      border-radius: 15px;
      padding: 15px;
      margin-top: 15px;
      position: relative;
      font-size: 0.95rem;
      color: #555;
    }

    .professor-speech::before {
      content: '';
      position: absolute;
      top: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 0;
      height: 0;
      border-left: 10px solid transparent;
      border-right: 10px solid transparent;
      border-bottom: 10px solid #e0e0e0;
    }

    .chat-container {
      border: 2px solid #e0e0e0;
      border-radius: 15px;
      overflow: hidden;
    }

    @media (max-width: 900px) {
      .chat-section.active {
        grid-template-columns: 1fr;
      }

      .professor-container {
        position: relative;
        top: 0;
      }

      .Dify-professor.png {
        max-width: 200px;
      }
    }

    .chat-header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 15px 20px;
      font-weight: 600;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .chat-close {
      background: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      cursor: pointer;
      padding: 5px 10px;
      border-radius: 5px;
    }

    .chat-messages {
      height: 400px;
      overflow-y: auto;
      padding: 20px;
      background: #f8f9fa;
    }

    .message {
      margin-bottom: 15px;
      display: flex;
    }

    .message.user {
      justify-content: flex-end;
    }

    .message-content {
      max-width: 70%;
      padding: 12px 18px;
      border-radius: 18px;
      word-wrap: break-word;
    }

    .message.user .message-content {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
    }

    .message.assistant .message-content {
      background: white;
      border: 2px solid #e0e0e0;
      color: #333;
    }

    .chat-input-container {
      display: flex;
      gap: 10px;
      padding: 15px;
      background: white;
      border-top: 2px solid #e0e0e0;
    }

    .chat-input {
      flex: 1;
      border: 2px solid #e0e0e0;
      padding: 12px 20px;
      border-radius: 25px;
      font-size: 1rem;
      outline: none;
    }

    .chat-input:focus {
      border-color: #667eea;
    }

    .send-btn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 12px 25px;
      border-radius: 25px;
      cursor: pointer;
      font-weight: 600;
    }

    .send-btn:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .loading {
      display: flex;
      gap: 5px;
      padding: 10px;
    }

    .loading-dot {
      width: 8px;
      height: 8px;
      background: #667eea;
      border-radius: 50%;
      animation: bounce 1.4s infinite ease-in-out both;
    }

    .loading-dot:nth-child(1) { animation-delay: -0.32s; }
    .loading-dot:nth-child(2) { animation-delay: -0.16s; }

    @keyframes bounce {
      0%, 80%, 100% { transform: scale(0); }
      40% { transform: scale(1); }
    }

    .success-icon {
      width: 80px;
      height: 80px;
      background: #10b981;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 20px;
      font-size: 3rem;
    }

    @media (max-width: 600px) {
      .container {
        padding: 20px;
      }

      h1 {
        font-size: 2rem;
      }

      .question-text {
        font-size: 1.4rem;
      }

      .result-badge {
        font-size: 3rem;
        padding: 20px 40px;
      }
    }
  </style>
</head>
<body>
<div class="container">
  <!-- Intro Screen -->
  <div id="introScreen" class="screen active">
    <h1>16 Personalities Quiz</h1>
    <p class="subtitle">Entdecke deinen Pers√∂nlichkeitstyp und erhalte personalisierte Lerntipps</p>
    <div class="info-box">
      <p>üìä 12 Fragen</p>
      <p>‚è±Ô∏è Ca. 5 Minuten</p>
      <p>ü§ñ KI-gest√ºtzte Analyse mit Dify</p>
    </div>
    <button class="btn" onclick="startQuiz()">Quiz starten</button>
  </div>

  <!-- Quiz Screen -->
  <div id="quizScreen" class="screen">
    <div class="progress-container">
      <div class="progress-info">
        <span id="questionNumber">Frage 1 von 12</span>
        <span id="progressPercent">8%</span>
      </div>
      <div class="progress-bar">
        <div id="progressFill" class="progress-fill" style="width: 8%"></div>
      </div>
    </div>

    <h2 class="question-text" id="questionText"></h2>

    <div class="options" id="optionsContainer"></div>

    <button class="back-btn" id="backBtn" onclick="previousQuestion()" style="display: none;">‚Üê Zur√ºck</button>
  </div>

  <!-- Results Screen -->
  <div id="resultsScreen" class="screen">
    <div class="result-box">
      <div class="success-icon">‚úì</div>
      <h1>Dein Pers√∂nlichkeitstyp</h1>
      <div class="result-badge" id="mbtiResult"></div>
      <p class="result-description" id="mbtiDescription"></p>
      <div class="info-box">
        <p>üí¨ M√∂chtest du mehr √ºber deinen Lerntyp erfahren?</p>
      </div>
      <button class="btn" onclick="openChat()">Chat mit KI-Berater √∂ffnen</button>
    </div>

    <!-- Chat Container -->
    <div id="chatContainer" class="chat-container">
      <div class="chat-header">
        <span>KI Lernberater (Dify)</span>
        <button class="chat-close" onclick="closeChat()">‚úï</button>
      </div>
      <div class="chat-messages" id="chatMessages"></div>
      <div class="chat-input-container">
        <input type="text" class="chat-input" id="chatInput" placeholder="Stelle eine Frage zu deinem Lerntyp..." onkeypress="handleChatKeyPress(event)">
        <button class="send-btn" id="sendBtn" onclick="sendMessage()">Senden</button>
      </div>
    </div>
  </div>
</div>

<script>
  // Quiz Daten
  const quizData = [
    {
      question: "Wie reagierst du auf unerwartete √Ñnderungen im Zeitplan?",
      options: [
        { text: "Ich finde sie spannend und erfrischend", trait: "P" },
        { text: "Ich finde sie st√∂rend und plane lieber im Voraus", trait: "J" },
        { text: "Ich bespreche sie mit anderen", trait: "E" },
        { text: "Ich ziehe mich zur√ºck, um nachzudenken", trait: "I" }
      ]
    },
    {
      question: "Was motiviert dich am meisten beim Lernen?",
      options: [
        { text: "Die M√∂glichkeit, Neues auszuprobieren", trait: "N" },
        { text: "Ein klar definiertes Ziel", trait: "J" },
        { text: "Das Teilen mit anderen", trait: "E" },
        { text: "Ruhe und Selbstreflexion", trait: "I" }
      ]
    },
    {
      question: "Welche Art von Informationen bevorzugst du?",
      options: [
        { text: "Konkrete Daten und Beispiele", trait: "S" },
        { text: "Abstrakte Theorien und Konzepte", trait: "N" },
        { text: "Was logisch erkl√§rbar ist", trait: "T" },
        { text: "Was emotional anspricht", trait: "F" }
      ]
    },
    {
      question: "Was tust du bei einem Konflikt in der Lerngruppe?",
      options: [
        { text: "Ich versuche, alle zu verstehen", trait: "F" },
        { text: "Ich analysiere die Ursache objektiv", trait: "T" },
        { text: "Ich spreche direkt mit allen Beteiligten", trait: "E" },
        { text: "Ich √ºberlege erst f√ºr mich allein", trait: "I" }
      ]
    },
    {
      question: "Wie gehst du mit einer neuen komplexen Aufgabe um?",
      options: [
        { text: "Ich strukturiere sie in kleine Schritte", trait: "J" },
        { text: "Ich experimentiere frei darauf los", trait: "P" },
        { text: "Ich bespreche Ideen mit anderen", trait: "E" },
        { text: "Ich recherchiere selbstst√§ndig", trait: "I" }
      ]
    },
    {
      question: "Was ist dir beim Lernen wichtiger?",
      options: [
        { text: "Logische Argumentation", trait: "T" },
        { text: "Zwischenmenschliche Harmonie", trait: "F" },
        { text: "Praktische Anwendbarkeit", trait: "S" },
        { text: "Zukunftsvision und Ideen", trait: "N" }
      ]
    },
    {
      question: "Wie planst du deine Lernzeit?",
      options: [
        { text: "Ich entscheide spontan je nach Gef√ºhl", trait: "P" },
        { text: "Ich folge einem klaren Zeitplan", trait: "J" },
        { text: "Ich lerne, wenn ich Energie habe", trait: "E" },
        { text: "Ich plane Pausen zum Nachdenken ein", trait: "I" }
      ]
    },
    {
      question: "Wie reagierst du auf Feedback?",
      options: [
        { text: "Ich analysiere es sachlich", trait: "T" },
        { text: "Ich nehme es emotional wahr", trait: "F" },
        { text: "Ich diskutiere es offen", trait: "E" },
        { text: "Ich reflektiere es f√ºr mich", trait: "I" }
      ]
    },
    {
      question: "Wie arbeitest du am liebsten?",
      options: [
        { text: "In strukturierten Phasen mit klaren Zielen", trait: "J" },
        { text: "Flexibel und offen f√ºr Ver√§nderungen", trait: "P" },
        { text: "Im kreativen Chaos", trait: "N" },
        { text: "Mit konkreten Vorgaben", trait: "S" }
      ]
    },
    {
      question: "Worauf achtest du beim Lesen eines Textes?",
      options: [
        { text: "Die Kernaussage und Zusammenh√§nge", trait: "N" },
        { text: "Jedes Detail und jede Zahl", trait: "S" },
        { text: "Die Argumentationslogik", trait: "T" },
        { text: "Die emotionale Wirkung", trait: "F" }
      ]
    },
    {
      question: "Wie organisierst du deine Materialien?",
      options: [
        { text: "Ich sortiere sie logisch und ordentlich", trait: "J" },
        { text: "Ich halte sie griffbereit, auch wenn chaotisch", trait: "P" },
        { text: "Ich bespreche sie gerne mit anderen", trait: "E" },
        { text: "Ich bearbeite sie lieber alleine", trait: "I" }
      ]
    },
    {
      question: "Welche Lernform passt am besten zu dir?",
      options: [
        { text: "Diskussionen mit anderen", trait: "E" },
        { text: "Selbstst√§ndiges Nachdenken", trait: "I" },
        { text: "Fallbeispiele und Anwendungen", trait: "S" },
        { text: "Zukunftsorientierte Fragestellungen", trait: "N" }
      ]
    }
  ];

  // Dify Konfiguration
  const DIFY_CONFIG = {
    baseUrl: 'http://dify.wpvs.de/v1',
    apiKey: 'app-cbbMhVALPoxQl0zYdZC22wnF'
  };

  // State
  let currentQuestion = 0;
  let answers = [];
  let mbtiResult = '';
  let conversationId = '';

  // Personality Beschreibungen
  const personalityDescriptions = {
    'INTJ': 'Der Architekt - Strategisch, analytisch und zielorientiert',
    'INTP': 'Der Logiker - Innovativ, neugierig und theoretisch',
    'ENTJ': 'Der Kommandeur - F√ºhrungsstark, entschlossen und effizient',
    'ENTP': 'Der Debattierer - Kreativ, argumentativ und vielseitig',
    'INFJ': 'Der Advokat - Vision√§r, empathisch und idealistisch',
    'INFP': 'Der Mediator - Einf√ºhlsam, kreativ und werteorientiert',
    'ENFJ': 'Der Protagonist - Charismatisch, inspirierend und sozial',
    'ENFP': 'Der Aktivist - Enthusiastisch, kreativ und kommunikativ',
    'ISTJ': 'Der Logistiker - Zuverl√§ssig, praktisch und organisiert',
    'ISFJ': 'Der Verteidiger - F√ºrsorglich, loyal und detailorientiert',
    'ESTJ': 'Der Exekutive - Strukturiert, durchsetzungsstark und traditionell',
    'ESFJ': 'Der Konsul - Hilfsbereit, gesellig und pflichtbewusst',
    'ISTP': 'Der Virtuose - Praktisch, analytisch und handwerklich',
    'ISFP': 'Der Abenteurer - K√ºnstlerisch, flexibel und erlebnisorientiert',
    'ESTP': 'Der Unternehmer - Energisch, pragmatisch und risikofreudig',
    'ESFP': 'Der Entertainer - Spontan, unterhaltsam und optimistisch'
  };

  function startQuiz() {
    showScreen('quizScreen');
    displayQuestion();
  }

  function displayQuestion() {
    const question = quizData[currentQuestion];
    document.getElementById('questionText').textContent = question.question;

    const optionsContainer = document.getElementById('optionsContainer');
    optionsContainer.innerHTML = '';

    question.options.forEach((option, index) => {
      const optionDiv = document.createElement('div');
      optionDiv.className = 'option';
      optionDiv.textContent = option.text;
      optionDiv.onclick = () => selectAnswer(option);
      optionsContainer.appendChild(optionDiv);
    });

    updateProgress();
    document.getElementById('backBtn').style.display = currentQuestion > 0 ? 'block' : 'none';
  }

  function updateProgress() {
    const progress = ((currentQuestion + 1) / quizData.length) * 100;
    document.getElementById('questionNumber').textContent = `Frage ${currentQuestion + 1} von ${quizData.length}`;
    document.getElementById('progressPercent').textContent = `${Math.round(progress)}%`;
    document.getElementById('progressFill').style.width = `${progress}%`;
  }

  function selectAnswer(option) {
    answers.push(option);

    if (currentQuestion < quizData.length - 1) {
      currentQuestion++;
      displayQuestion();
    } else {
      calculateAndShowResults();
    }
  }

  function previousQuestion() {
    if (currentQuestion > 0) {
      currentQuestion--;
      answers.pop();
      displayQuestion();
    }
  }

  function calculateAndShowResults() {
    const counts = { E: 0, I: 0, S: 0, N: 0, T: 0, F: 0, J: 0, P: 0 };

    answers.forEach(answer => {
      counts[answer.trait]++;
    });

    mbtiResult =
      (counts.E > counts.I ? 'E' : 'I') +
      (counts.S > counts.N ? 'S' : 'N') +
      (counts.T > counts.F ? 'T' : 'F') +
      (counts.J > counts.P ? 'J' : 'P');

    document.getElementById('mbtiResult').textContent = mbtiResult;
    document.getElementById('mbtiDescription').textContent = personalityDescriptions[mbtiResult] || mbtiResult;

    showScreen('resultsScreen');
    sendResultsToDify();
  }

  async function sendResultsToDify() {
    const resultSummary = `Der Benutzer hat den MBTI-Pers√∂nlichkeitstest abgeschlossen.

Ergebnis: ${mbtiResult}

Antworten des Benutzers:
${answers.map((a, i) => `${i + 1}. ${quizData[i].question}\n   Antwort: ${a.text} (${a.trait})`).join('\n\n')}

Bitte analysiere diesen Pers√∂nlichkeitstyp und gib personalisierte Lerntipps und Empfehlungen.`;

    try {
      const response = await fetch(`${DIFY_CONFIG.baseUrl}/chat-messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${DIFY_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          inputs: {},
          query: resultSummary,
          response_mode: 'blocking',
          user: 'quiz-user-' + Date.now()
        })
      });

      if (response.ok) {
        const data = await response.json();
        conversationId = data.conversation_id;
        console.log('Ergebnisse erfolgreich an Dify gesendet');
      }
    } catch (error) {
      console.error('Fehler beim Senden an Dify:', error);
    }
  }

  function openChat() {
    document.getElementById('chatContainer').classList.add('active');
    if (document.getElementById('chatMessages').children.length === 0) {
      addMessage('assistant', 'Hallo! Ich bin dein pers√∂nlicher Lernassistent. Stell mir Fragen zu deinem Pers√∂nlichkeitstyp und wie du am besten lernen kannst!');
    }
  }

  function closeChat() {
    document.getElementById('chatContainer').classList.remove('active');
  }

  function addMessage(role, content) {
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${role}`;

    const contentDiv = document.createElement('div');
    contentDiv.className = 'message-content';
    contentDiv.textContent = content;

    messageDiv.appendChild(contentDiv);
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function addLoadingMessage() {
    const messagesContainer = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = 'message assistant';
    messageDiv.id = 'loadingMessage';

    const loadingDiv = document.createElement('div');
    loadingDiv.className = 'message-content';
    loadingDiv.innerHTML = '<div class="loading"><div class="loading-dot"></div><div class="loading-dot"></div><div class="loading-dot"></div></div>';

    messageDiv.appendChild(loadingDiv);
    messagesContainer.appendChild(messageDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  function removeLoadingMessage() {
    const loadingMessage = document.getElementById('loadingMessage');
    if (loadingMessage) {
      loadingMessage.remove();
    }
  }

  async function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();

    if (!message) return;

    const sendBtn = document.getElementById('sendBtn');
    sendBtn.disabled = true;

    addMessage('user', message);
    input.value = '';

    addLoadingMessage();

    try {
      const response = await fetch(`${DIFY_CONFIG.baseUrl}/chat-messages`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${DIFY_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          inputs: {},
          query: message,
          response_mode: 'blocking',
          conversation_id: conversationId || undefined,
          user: 'quiz-user-' + Date.now()
        })
      });

      removeLoadingMessage();

      if (response.ok) {
        const data = await response.json();

        if (!conversationId && data.conversation_id) {
          conversationId = data.conversation_id;
        }

        addMessage('assistant', data.answer || 'Entschuldigung, ich konnte keine Antwort generieren.');
      } else {
        addMessage('assistant', 'Es gab einen Fehler bei der Verbindung. Bitte versuche es erneut.');
      }
    } catch (error) {
      removeLoadingMessage();
      console.error('Chat Fehler:', error);
      addMessage('assistant', 'Es gab einen Fehler bei der Verbindung. Bitte versuche es erneut.');
    } finally {
      sendBtn.disabled = false;
      input.focus();
    }
  }

  function handleChatKeyPress(event) {
    if (event.key === 'Enter') {
      sendMessage();
    }
  }

  function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
      screen.classList.remove('active');
    });
    document.getElementById(screenId).classList.add('active');
  }
</script>
</body>
</html>
